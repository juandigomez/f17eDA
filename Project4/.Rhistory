require(data.world)
require(MASS)
require(ISLR)
require(dplyr)
require(ggplot2)
require(hexbin)
require(jsonlite)
require(shiny)
require(rsconnect)
require(knitr)
require(lubridate)
require(rmarkdown)
require(tidyr)
require(glmnet)
library(ggplot2)
library(class)
library(glmnet)
library(leaps)
library("e1071")
require(tree)
require(randomForest)
require(gbm)
knitr::opts_chunk$set(echo = TRUE)
grad_deg=c(graduates_degree)
require(data.world)
project <- "https://data.world/juandi/f-17-eda-project-4"
data.world::set_config(cfg_env("DW_API"))
electiondf <- data.world::query(
data.world::qry_sql("SELECT * FROM electiondata"),
dataset = project
)
attach(electiondf)
# Setting up the data
df = electiondf
result = df$candidate
df$candidate[df$candidate == "Trump"] <- 1
df$candidate[df$candidate == "Clinton"] <- 0
drops <- c("state")
df <- df[ , !(names(df) %in% drops)]
df$candidate = as.numeric(df$candidate)
df$candidate = as.numeric(df$votes)
df=data.frame(df, result)
grad_deg=c(graduates_degree)
percent_dem=c(pct_dem)
train=data.frame(grad_deg,percent_dem)
renderPlot(plot(train,pch=16))
model <- lm(percent_dem ~ grad_deg, train)
abline(model)
grad_deg=c(graduates_degree)
percent_dem=c(pct_dem)
train=data.frame(grad_deg,percent_dem)
plot(train,pch=16)
model <- lm(percent_dem ~ grad_deg, train)
abline(model)
model_svm <- svm(percent_dem~grad_deg,train)
pred <- predict(model_svm,train)
points(train$grad_deg, pred, col="blue", pch=4)
grad_deg=c(graduates_degree)
percent_dem=c(pct_dem)
train=data.frame(grad_deg,percent_dem)
renderPlot(plot(train,pch=16))
model <- lm(percent_dem ~ grad_deg, train)
renderPlot(abline(model))
model_svm <- svm(percent_dem~grad_deg,train)
pred <- predict(model_svm,train)
points(train$grad_deg, pred, col="blue", pch=4)
grad_deg=c(graduates_degree)
percent_dem=c(pct_dem)
train=data.frame(grad_deg,percent_dem)
renderPlot(plot(train,pch=16))
model <- lm(percent_dem ~ grad_deg, train)
renderPlot(abline(model))
model_svm <- svm(percent_dem~grad_deg,train)
pred <- predict(model_svm,train)
renderPlot(points(train$grad_deg, pred, col="blue", pch=4))
error <- model$residuals
lm_error <- sqrt(mean(error^2)) # 3.832974
error_2 <- train$percent_dem - pred
svm_error <- sqrt(mean(error_2^2)) # 2.696281
svm_tune <- tune(svm, percent_dem ~ grad_deg, data = train,
ranges = list(epsilon = seq(0,1,0.01), cost = 2^(2:9))
)
error <- model$residuals
lm_error <- sqrt(mean(error^2)) # 3.832974
error_2 <- train$percent_dem - pred
svm_error <- sqrt(mean(error_2^2)) # 2.696281
svm_tune <- tune(svm, percent_dem ~ grad_deg, data = train,
ranges = list(epsilon = seq(0,1,0.01), cost = 2^(2:9))
)
#error <- model$residuals
#lm_error <- sqrt(mean(error^2)) # 3.832974
#error_2 <- train$percent_dem - pred
#svm_error <- sqrt(mean(error_2^2)) # 2.696281
#svm_tune <- tune(svm, percent_dem ~ grad_deg, data = train,
#                 ranges = list(epsilon = seq(0,1,0.01), cost = 2^(2:9))
#)
#print(svm_tune)
#best_mod <- svm_tune$best.model
#best_mod_pred <- predict(best_mod, train)
#error_best_mod <- train$percent_dem - best_mod_pred
#best_mod_RMSE <- sqrt(mean(error_best_mod^2)) # 1.290738
#renderPlot(plot(svm_tune))
#renderPlot(plot(train,pch=16))
#points(train$grad_deg, best_mod_pred, col = "blue", pch=4)
require(data.world)
require(MASS)
require(ISLR)
require(dplyr)
require(ggplot2)
require(hexbin)
require(jsonlite)
require(shiny)
require(rsconnect)
require(knitr)
require(lubridate)
require(rmarkdown)
require(tidyr)
require(glmnet)
library(ggplot2)
library(class)
library(glmnet)
library(leaps)
library("e1071")
require(tree)
require(randomForest)
require(gbm)
knitr::opts_chunk$set(echo = TRUE)
require(data.world)
project <- "https://data.world/juandi/f-17-eda-project-4"
data.world::set_config(cfg_env("DW_API"))
electiondf <- data.world::query(
data.world::qry_sql("SELECT * FROM electiondata"),
dataset = project
)
attach(electiondf)
# Setting up the data
df = electiondf
result = df$candidate
df$candidate[df$candidate == "Trump"] <- 1
df$candidate[df$candidate == "Clinton"] <- 0
drops <- c("state")
df <- df[ , !(names(df) %in% drops)]
df$candidate = as.numeric(df$candidate)
df$candidate = as.numeric(df$votes)
df=data.frame(df, result)
grad_deg=c(graduates_degree)
percent_dem=c(pct_dem)
train=data.frame(grad_deg,percent_dem)
renderPlot(plot(train,pch=16))
model <- lm(percent_dem ~ grad_deg, train)
renderPlot(abline(model))
model_svm <- svm(percent_dem~grad_deg,train)
pred <- predict(model_svm,train)
renderPlot(points(train$grad_deg, pred, col="blue", pch=4))
#error <- model$residuals
#lm_error <- sqrt(mean(error^2)) # 3.832974
#error_2 <- train$percent_dem - pred
#svm_error <- sqrt(mean(error_2^2)) # 2.696281
#svm_tune <- tune(svm, percent_dem ~ grad_deg, data = train,
#                 ranges = list(epsilon = seq(0,1,0.01), cost = 2^(2:9))
#)
#print(svm_tune)
#best_mod <- svm_tune$best.model
#best_mod_pred <- predict(best_mod, train)
#error_best_mod <- train$percent_dem - best_mod_pred
#best_mod_RMSE <- sqrt(mean(error_best_mod^2)) # 1.290738
#renderPlot(plot(svm_tune))
#renderPlot(plot(train,pch=16))
#points(train$grad_deg, best_mod_pred, col = "blue", pch=4)
