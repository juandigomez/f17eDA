require(data.world)
require(MASS)
require(ISLR)
require(dplyr)
require(ggplot2)
require(hexbin)
require(jsonlite)
require(shiny)
require(rsconnect)
require(knitr)
require(lubridate)
require(rmarkdown)
require(tidyr)
require(glmnet)
library(MASS)
library(ISLR)
library(ggplot2)
library(class)
library(glmnet)
library(leaps)
library("e1071")
library(pROC)
install.packages("pROC")
require(data.world)
require(MASS)
require(ISLR)
require(dplyr)
require(ggplot2)
require(hexbin)
require(jsonlite)
require(shiny)
require(rsconnect)
require(knitr)
require(lubridate)
require(rmarkdown)
require(tidyr)
require(glmnet)
library(MASS)
library(ISLR)
library(ggplot2)
library(class)
library(glmnet)
library(leaps)
library("e1071")
library(pROC)
library(ROCR)
install.packages("ROCR")
require(data.world)
require(MASS)
require(ISLR)
require(dplyr)
require(ggplot2)
require(hexbin)
require(jsonlite)
require(shiny)
require(rsconnect)
require(knitr)
require(lubridate)
require(rmarkdown)
require(tidyr)
require(glmnet)
library(MASS)
library(ISLR)
library(ggplot2)
library(class)
library(glmnet)
library(leaps)
library("e1071")
library(pROC)
library(ROCR)
require(ROCR)
require(pROC)
require(tree)
require(randomForest)
require(gbm)
require(boot)
knitr::opts_chunk$set(echo = TRUE)
sessionInfo()
require(data.world)
project <- "https://data.world/patrickyoutube/f-17-eda-project-5"
data.world::set_config(cfg_env("DW_API"))
df <- data.world::query(
data.world::qry_sql("SELECT * FROM data"),
dataset = project
)
attach(df)
train1 <- sample(1:568, 284)
diagnosis2=lda(diagnosis~radius_mean+compactness_mean+concavity_mean+concave_points_mean+radius_se+smoothness_se+concavity_se+concave_points_se+radius_worst+texture_worst+area_worst+concavity_worst+symmetry_worst+fractal_dimension_worst,data=df,prior=c(1,1)/2,subset=train1)
lda.pred2=predict(diagnosis2,df[-train1, ])
df2 = data.frame(lda.pred2)
table(lda.pred2$class,df[-train1, ]$diagnosis)
mean(lda.pred2$class==df[-train1, ]$diagnosis)
# Establishing training data
train = id > 900000
# Test 3: Using resting blood preassure and chest pains to determine heart disease
test = cbind(radius_mean,compactness_mean,concavity_mean,concave_points_mean,radius_se,smoothness_se,concavity_se,concave_points_se,radius_worst,texture_worst,area_worst,concavity_worst,symmetry_worst,fractal_dimension_worst)
knn.pred = knn(test[train,], test[!train,], df$diagnosis[train], k=1)
table(knn.pred,df$diagnosis[!train])
mean(knn.pred==df$diagnosis[!train])
# Establishing training data
train = id > 900000
# Test 3: Using resting blood preassure and chest pains to determine heart disease
test = cbind(df$perimeter_mean,df$area_mean)
knn.pred = knn(test[train,], test[!train,], df$diagnosis[train], k=1)
table(knn.pred,df$diagnosis[!train])
mean(knn.pred==df$diagnosis[!train])
# Establishing training data
train = id > 900000
# Test 3: Using resting blood preassure and chest pains to determine heart disease
test = cbind(df$perimeter_mean,df$area_se)
knn.pred = knn(test[train,], test[!train,], df$diagnosis[train], k=1)
table(knn.pred,df$diagnosis[!train])
mean(knn.pred==df$diagnosis[!train])
